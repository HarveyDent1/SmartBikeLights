{"version":3,"sources":["constants.js","inputs/AppSelect.js","inputs/AppTextInput.js","models/FilterGroup.js","models/Filter.js","models/Polygon.js","models/LightButtonGroup.js","models/LightButton.js","models/LightPanel.js","models/Configuration.js","components/Accordion.js","components/AccordionSummary.js","components/AccordionDetails.js","inputs/AppSlider.js","filters/BatteryFilter.js","filters/NumberFilter.js","AppContext.js","filters/SpeedFilter.js","filters/GpsAccuracyFilter.js","filters/TimerStateFilter.js","inputs/AppTimePicker.js","filters/TimespanFilter.js","filters/PositionFilter.js","components/Filters.js","components/FilterGroups.js","components/ButtonGroup.js","components/LightPanel.js","components/LightConfiguration.js","components/DeviceConfiguration.js","App.js","reportWebVitals.js","index.js"],"names":["deviceList","id","name","polygons","touchScreen","map","forEach","item","deviceMap","isTouchScreen","device","filterList","filterMap","timespanTypeList","timespanTypeMap","unitList","speedUnitList","timeFormatList","operatorList","batteryStateList","gpsAccuracyList","timerStateList","lightModes","bontragerIonProRtModes","controlMode","headlightList","modes","defaultLightPanel","shortName","buttonGroups","bontragerFlareRtModes","taillightList","getBatteryOperator","operator","getBatteryValue","value","selectUseStyles","makeStyles","theme","input","width","observer","items","label","setter","required","nanoid","classes","useEffect","find","i","TextField","className","select","error","onChange","event","newValue","target","variant","InputProps","readOnly","endAdornment","Fragment","IconButton","style","marginRight","padding","onClick","MenuItem","textInputUseStyles","type","Number","isNaN","parseFloat","FilterGroup","hasLightMode","filters","lightMode","open","setName","length","replace","setLightMode","setOpen","this","_hasLightMode","makeAutoObservable","config","f","getConfigurationValue","every","isValid","m","getTimespanPartName","timeFormat","format","addSeconds","startOfToday","Filter","fromType","fromValue","toType","toValue","setType","setOperator","setValue","setFromType","setFromValue","setToType","setToValue","getTimespanPartValue","p","vertexes","v","context","units","speed","unitsName","Math","round","getSpeedName","Polygon","setVertexes","lat","lng","LightButtonGroup","buttons","g","LightButton","mode","setMode","LightPanel","data","lightName","setLightName","modeList","group","button","push","defaultFilter","parseNumber","chars","index","resultIndex","stringValue","isFloat","char","charNumber","charCodeAt","parseInt","parseNumberArray","left","parseTitle","parseTimespanPart","filterResult","dataIndex","parsePolygons","Array","parseGenericFilter","parseTimespan","parseLightPanel","panel","Error","lightButtonGroup","numberOfButtons","j","lightButton","parseToFilter","filter","polygon","endIndex","parseToFilterGroups","filterGroups","values","totalFilters","groupDataLength","totalGroups","filterValue","parseFilters","filterGroup","Configuration","globalFilterGroups","headlight","headlightModes","headlightFilterGroups","headlightDefaultMode","headlightPanel","taillight","taillightModes","taillightFilterGroups","taillightDefaultMode","taillightPanel","setDevice","setUnits","setTimeFormat","setHeadlight","setHeadlightModes","setHeadlightDefaultMode","setHeadlightPanel","setTaillight","setTaillightModes","setTaillightDefaultMode","setTaillightPanel","islightValid","light","lightFilterGroups","lightDefaultMode","getFilterGroupsConfigurationValue","getNumberArray","getLightPanelConfigurationValue","lightPanel","deviceId","l","totalButtons","defaultMode","defaultGroupConfig","getDefaultGroupConfigurationValue","configuration","defaultGroup","splice","withStyles","root","border","boxShadow","borderBottom","display","margin","expanded","Accordion","AccordionSummary","backgroundColor","marginBottom","minHeight","content","MuiAccordionSummary","useStyles","alignItems","color","justifyContent","param1","removeLabel","removeCallback","expandIcon","aria-controls","Grid","container","xs","sm","FormControlLabel","aria-label","stopPropagation","onFocus","control","edge","Typography","getDisplayName","spacing","AccordionDetails","sliderMakeStyles","getLabelText","step","min","max","defaultValue","gutterBottom","Slider","marks","aria-labelledby","valueLabelFormat","valueLabelDisplay","AppSelect","AppSlider","AppTextInput","getContextValue","AppContext","React","createContext","useContext","useState","setSpeed","newSpeed","mps","handleChange","Date","Consumer","TimePicker","ampm","renderInput","params","getInitValue","getFilterValue","differenceInSeconds","state","setState","setSeconds","AppTimePicker","Polygons","mappings","handleDrawStart","e","workingLayer","on","sourceTarget","getLatLngs","pm","Draw","_finishShape","handleEdit","layer","_leaflet_id","handleCreate","action","handleRemove","remove","off","useMap","setGlobalOptions","snappable","allowSelfIntersection","hideMiddleMarkers","addControls","position","drawCircle","drawMarker","drawCircleMarker","drawRectangle","drawPolyline","cutPolygon","Toolbar","changeActionsOfControl","featureGroup","addTo","addLayer","fitBounds","getBounds","locate","once","zoomIn","panTo","latlng","height","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","filterTypes","removeFilter","TransitionProps","unmountOnExit","TimespanFilter","PositionFilter","BatteryFilter","NumberFilter","SpeedFilter","GpsAccuracyFilter","TimerStateFilter","filtersWoPosition","o","getFilterTypes","hasLightModes","list","heading","setFilterTypes","createFilterGroup","removeFilterGroup","createFilter","List","Filters","Button","startIcon","flexGrow","cursor","paper","actions","buttonGroup","moveGroup","addButton","removeButton","ref","useRef","useDrop","accept","hover","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","opacity","drag","Paper","disabled","getModes","concat","setModes","addButtonGroup","useCallback","dragGroup","ButtonGroup","lights","sectionTitle","headerClassName","lightType","lightList","setLight","setLightModes","setDefaultMode","setLightPanel","LightPanelModel","Card","CardHeader","title","titleTypographyProps","align","CardContent","justify","FilterGroups","mainContent","palette","background","copyButton","marginTop","cardHeader","grey","card","LightConfiguration","navigator","clipboard","writeText","Alert","severity","parseButtonCell","parseButton","existingConfigurationValue","parseError","Provider","CssBaseline","AppBar","noWrap","Container","maxWidth","parse","DeviceConfiguration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","LocalizationProvider","dateAdapter","DateFnsAdapter","DndProvider","backend","HTML5Backend","App","document","getElementById"],"mappings":"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","file":"static/js/main.a4211352.chunk.js","sourcesContent":["export const deviceList = [\r\n  { id: 'B2713', name: 'Edge 1030', polygons: true, touchScreen: true },\r\n  { id: 'B3095', name: 'Edge 1030 / Bontrager', polygons: true, touchScreen: true },\r\n  { id: 'B3570', name: 'Edge 1030 Plus', polygons: true, touchScreen: true },\r\n  { id: 'B1836', name: 'Edge 1000 / Explore', polygons: true, touchScreen: true },\r\n  { id: 'B3011', name: 'Edge Explore', polygons: true, touchScreen: true },\r\n  { id: 'B3122', name: 'Edge 830', polygons: true, touchScreen: true },\r\n  { id: 'B2530', name: 'Edge 820 / Explore', polygons: true, touchScreen: true },\r\n  { id: 'B3121', name: 'Edge 530', polygons: true, touchScreen: false },\r\n  { id: 'B3112', name: 'Edge 520 Plus', polygons: true, touchScreen: false },\r\n  { id: 'B2067', name: 'Edge 520', polygons: false, touchScreen: false },\r\n  { id: 'B3558', name: 'Edge 130 Plus', polygons: false, touchScreen: false },\r\n  { id: 'B2909', name: 'Edge 130', polygons: false, touchScreen: false }\r\n];\r\n\r\nlet map = {};\r\ndeviceList.forEach(item => map[item.id] = item);\r\n\r\nexport const deviceMap = map;\r\n\r\nexport const isTouchScreen = (device) => {\r\n  return device && deviceMap[device] && deviceMap[device].touchScreen;\r\n};\r\n\r\nexport const filterList = [\r\n  { id: 'A', name: 'Acceleration' },\r\n  { id: 'B', name: 'Light Battery' },\r\n  { id: 'C', name: 'Speed' },\r\n  { id: 'E', name: 'Timespan' },\r\n  { id: 'F', name: 'Position' },\r\n  { id: 'G', name: 'GPS accuracy' },\r\n  { id: 'H', name: 'Timer state' }\r\n];\r\n\r\nmap = {};\r\nfilterList.forEach(item => map[item.id] = item.name);\r\n\r\nexport const filterMap = map;\r\n\r\nexport const timespanTypeList = [\r\n  { id: '0', name: 'UTC Time' },\r\n  { id: 'r', name: 'Sunrise' },\r\n  { id: 's', name: 'Sunset' }\r\n];\r\n\r\nmap = {};\r\ntimespanTypeList.forEach(item => map[item.id] = item.name);\r\n\r\nexport const timespanTypeMap = map;\r\n\r\nexport const unitList = [\r\n  { id: 0, name: 'Metric (km/h)' },\r\n  { id: 1, name: 'Statute (MPH)' },\r\n];\r\n\r\nexport const speedUnitList = [\r\n  { id: 0, name: 'km/h' },\r\n  { id: 1, name: 'MPH' },\r\n];\r\n\r\nexport const timeFormatList = [\r\n  { id: 0, name: '24h' },\r\n  { id: 1, name: '12h' },\r\n];\r\n\r\nexport const operatorList = [\r\n  { id: '=', name: 'Equal to' },\r\n  { id: '>', name: 'Greater than' },\r\n  { id: '<', name: 'Lower than' }\r\n];\r\n\r\nexport const batteryStateList = [\r\n  null,\r\n  'Bad',\r\n  'Low',\r\n  'Ok',\r\n  'Good',\r\n  'New'\r\n];\r\n\r\nexport const gpsAccuracyList = [\r\n  'N/A',\r\n  'Last',\r\n  'Poor',\r\n  'Ok',\r\n  'Good'\r\n];\r\n\r\nexport const timerStateList = [\r\n  'NR', // Not recording\r\n  'ST', // Recording stopped\r\n  'PA', // Recording paused\r\n  'RE'  // Recording\r\n];\r\n\r\nconst lightModes = [\r\n  { id: 0, name: 'Off' },\r\n  { id: 1, name: 'Steady beam 81-100% intensity' },\r\n  { id: 2, name: 'Steady beam 61-80% intensity' },\r\n  { id: 3, name: 'Steady beam 41-60% intensity' },\r\n  { id: 4, name: 'Steady beam 21-40% intensity' },\r\n  { id: 5, name: 'Steady beam 0-20% intensity' },\r\n  { id: 6, name: 'Slow flash mode' },\r\n  { id: 7, name: 'Fast flash mode' },\r\n  { id: 8, name: 'Randomly timed flash mode' },\r\n  { id: 9, name: 'Auto' },\r\n  { id: 59, name: 'Custom mode 1 (manufacturer-defined)' },\r\n  { id: 60, name: 'Custom mode 2 (manufacturer-defined)' },\r\n  { id: 61, name: 'Custom mode 3 (manufacturer-defined)' },\r\n  { id: 62, name: 'Custom mode 4 (manufacturer-defined)' },\r\n  { id: 63, name: 'Custom mode 5 (manufacturer-defined)' }\r\n];\r\n\r\nconst bontragerIonProRtModes = [\r\n  { id: 0, name: 'Off' },\r\n  { id: 1, name: 'High' },\r\n  { id: 2, name: 'Medium' },\r\n  { id: 5, name: 'Low' },\r\n  { id: 63, name: 'Day Flash' },\r\n  { id: 62, name: 'Night Flash' }\r\n];\r\n\r\nexport const controlMode = {id: -1, name: \"Control mode\"};\r\n\r\nexport const headlightList = [\r\n  {\r\n    id: 1,\r\n    name: 'Bontrager ION PRO RT',\r\n    modes: bontragerIonProRtModes,\r\n    lightModes: [4587520, 196641], // 19703248369942561\r\n    defaultLightPanel: {\r\n      shortName: 'Ion Pro RT',\r\n      buttonGroups: [\r\n        [controlMode, bontragerIonProRtModes[0]],\r\n        [bontragerIonProRtModes[1]],\r\n        [bontragerIonProRtModes[2]],\r\n        [bontragerIonProRtModes[3]],\r\n        [bontragerIonProRtModes[4]],\r\n        [bontragerIonProRtModes[5]]\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    id: 99,\r\n    name: 'Unknown',\r\n    modes: lightModes,\r\n    lightModes: null,\r\n    defaultLightPanel: null\r\n  }\r\n];\r\n\r\nconst bontragerFlareRtModes = [\r\n  { id: 0, name: 'Off' },\r\n  { id: 1, name: 'Day Steady' },\r\n  { id: 5, name: 'Night Steady' },\r\n  { id: 7, name: 'Day Flash' },\r\n  { id: 8, name: 'All-Day Flash' },\r\n  { id: 63, name: 'Night Flash' }\r\n];\r\n\r\nexport const taillightList = [\r\n  {\r\n    id: 1,\r\n    name: 'Bontrager Flare RT',\r\n    modes: bontragerFlareRtModes,\r\n    lightModes: [6291461, 1409482753], // 27021620648542209\r\n    defaultLightPanel: {\r\n      shortName: 'Flare RT',\r\n      buttonGroups: [\r\n        [controlMode, bontragerFlareRtModes[0]],\r\n        [bontragerFlareRtModes[1]],\r\n        [bontragerFlareRtModes[2]],\r\n        [bontragerFlareRtModes[3]],\r\n        [bontragerFlareRtModes[4]],\r\n        [bontragerFlareRtModes[5]]\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    id: 99,\r\n    name: 'Unknown',\r\n    modes: lightModes,\r\n    lightModes: null,\r\n    defaultLightPanel: null\r\n  }\r\n];\r\n\r\nexport const getBatteryOperator = (operator) => {\r\n  return operator === '<' ? '>'\r\n    : operator === '>' ? '<'\r\n    : operator;\r\n};\r\n\r\nexport const getBatteryValue = (value) => {\r\n  return 6 - value;\r\n};","import { useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst selectUseStyles = makeStyles((theme) => ({\r\n  input: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport default observer(({ items, label, value, setter, required }) => {\r\n  const id = nanoid();\r\n  const classes = selectUseStyles();\r\n  const handleChange = (event) => {\r\n    const newValue = event.target.value;\r\n    setter(!items.find(i => i.id === newValue) ? null : newValue);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!items.find(i => i.id === value)) {\r\n        setter(null);\r\n      }\r\n    },\r\n    [items, value, setter]\r\n  );\r\n\r\n  if (value === null || !items.find(i => i.id === value)) {\r\n    value = '';\r\n  }\r\n\r\n  return (\r\n    <TextField\r\n      className={classes.input}\r\n      id={id}\r\n      select\r\n      required={required}\r\n      error={ required && value === '' ? true : false}\r\n      label={label}\r\n      value={value}\r\n      onChange={handleChange}\r\n      variant=\"standard\"\r\n      InputProps={{\r\n        readOnly: !setter,\r\n        endAdornment: (\r\n          setter && !required && value !== '' ?\r\n          <React.Fragment>\r\n            <IconButton\r\n              style={{ marginRight: \"1em\", padding: '0' }}\r\n              onClick={() => setter(null)}\r\n            >\r\n              <Close />\r\n            </IconButton>\r\n          </React.Fragment>\r\n          : null\r\n        )\r\n      }}\r\n    >\r\n      {items.map((item) => (\r\n        <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\r\n      ))}\r\n    </TextField>\r\n  );\r\n});\r\n","import { nanoid } from 'nanoid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst textInputUseStyles = makeStyles((theme) => ({\r\n  input: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport default observer(({ type, label, value, setter, required }) => {\r\n  const id = nanoid();\r\n  const classes = textInputUseStyles();\r\n  const handleChange = (event) => {\r\n    let newValue = event.target.value;\r\n    setter(type === 'number' ? parseFloat(newValue) : newValue);\r\n  };\r\n\r\n  if (value === null || Number.isNaN(value)) {\r\n    value = '';\r\n  }\r\n\r\n  return (\r\n    <TextField\r\n      id={id}\r\n      className={classes.input}\r\n      label={label}\r\n      required={required}\r\n      error={required && value === '' ? true : false}\r\n      variant=\"standard\"\r\n      type={type}\r\n      value={value}\r\n      onChange={handleChange}\r\n      InputProps={{\r\n        readOnly: !setter,\r\n      }}\r\n    />\r\n  );\r\n});","import { nanoid } from 'nanoid';\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\nexport default class FilterGroup {\r\n  _hasLightMode;\r\n  id;\r\n  name = null;\r\n  filters = [];\r\n  lightMode = null;\r\n  // Ui properties\r\n  open = true;\r\n\r\n  constructor(hasLightMode) {\r\n    this._hasLightMode = hasLightMode;\r\n    this.id = nanoid();\r\n    makeAutoObservable(this, {\r\n      id: false\r\n    });\r\n  }\r\n\r\n  get displayName() {\r\n    return 'Group ' + (this.name || '');\r\n  }\r\n\r\n  getConfigurationValue() {\r\n    let config = `${(this.name || '')}:${this.filters.length}`;\r\n    if (this._hasLightMode) {\r\n      config += `:${this.lightMode}`;\r\n    }\r\n\r\n    this.filters.forEach(f => {\r\n      config += `${(f.getConfigurationValue() || '')}`;\r\n    });\r\n\r\n    return config;\r\n  }\r\n\r\n  isValid() {\r\n    if ((this._hasLightMode && this.lightMode === null) || !this.filters.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.filters.every(f => f.isValid());\r\n  }\r\n\r\n  setName = (value) => {\r\n    if (value.length > 6) {\r\n      return;\r\n    }\r\n\r\n    this.name = value.replace(/[^a-z0-9]/gi,'');\r\n  }\r\n\r\n  setLightMode = (value) => {\r\n    this.lightMode = value;\r\n  }\r\n\r\n  setOpen = (value) => {\r\n    this.open = value;\r\n  }\r\n\r\n  getDisplayName(lightModes) {\r\n    var name = 'Group';\r\n    if (this.name) {\r\n      name += ' Name: ' + this.name;\r\n    }\r\n\r\n    if (lightModes && this.lightMode !== null) {\r\n      name += ' Light Mode: ' + lightModes.find(m => m.id === this.lightMode).name;\r\n    }\r\n\r\n    return name;\r\n  }\r\n}","import { nanoid } from 'nanoid';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { filterMap, batteryStateList, gpsAccuracyList, timerStateList, timespanTypeMap, speedUnitList, getBatteryOperator, getBatteryValue } from '../constants';\r\nimport addSeconds from 'date-fns/addSeconds';\r\nimport startOfToday from 'date-fns/startOfToday';\r\nimport format from 'date-fns/format';\r\n\r\nconst getTimespanPartName = (type, value, timeFormat) => {\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    type === '0' /* Time */\r\n    ? format(addSeconds(startOfToday(), value), timeFormat === 0 /* 24H */ ? 'H:mm' : 'h:mm aa')\r\n    : timespanTypeMap[type] + (\r\n      value === 0 ? ''\r\n      : value > 0 ? '+' + (value / 60) + ' min'\r\n      : (value / 60) + ' min')\r\n  );\r\n};\r\n\r\nconst getSpeedName = (value, units) => {\r\n  const speed = units === 0 /* Metric */\r\n      ? value * 3.6\r\n      : value * 2.236934;\r\n  const unitsName = speedUnitList[units].name;\r\n\r\n  return `${Math.round(speed * 100) / 100} ${unitsName}`; \r\n};\r\n\r\nexport default class Filter {\r\n  id;\r\n  type = null;\r\n  operator = null;\r\n  value = null;\r\n  // Timeline fields\r\n  fromType = null;\r\n  fromValue = null;\r\n  toType = null;\r\n  toValue = null;\r\n  // Position fields\r\n  polygons = [];\r\n  // Ui properties\r\n  open = true;\r\n\r\n  constructor() {\r\n    this.id = nanoid();\r\n    makeAutoObservable(this, {\r\n      id: false\r\n    });\r\n  }\r\n\r\n  isValid() {\r\n    switch (this.type) {\r\n      case 'E':\r\n        return this.fromType && this.fromValue !== null && !Number.isNaN(this.fromValue) && \r\n          this.toType && this.toValue !== null && !Number.isNaN(this.toValue);\r\n      case 'F':\r\n        return this.polygons.length;\r\n      default:\r\n        return this.type && this.value !== '' && this.value !== null && !Number.isNaN(this.value) && this.operator;\r\n    }\r\n  }\r\n\r\n  getConfigurationValue() {\r\n    const getTimespanPartValue = (type, value) => {\r\n      return type === '0' /* Time */ ? value : `${type}${value}`;\r\n    };\r\n\r\n    let config = this.type;\r\n    if (this.type === 'F') {\r\n      if (!this.polygons.length) {\r\n        return null;\r\n      }\r\n\r\n      config += `${this.polygons.length}`;\r\n      this.polygons.forEach(p => {\r\n        p.vertexes.forEach(v => {\r\n          config += `,${v[0]},${v[1]}`;\r\n        });\r\n      });\r\n\r\n      return config;\r\n    }\r\n\r\n    if (this.type === 'E') {\r\n      config += `${getTimespanPartValue(this.fromType, this.fromValue)},`;\r\n      config += `${getTimespanPartValue(this.toType, this.toValue)}`;\r\n      return config;\r\n    }\r\n\r\n    return `${config}${this.operator}${this.value}`;\r\n  }\r\n\r\n  get hasOperator() {\r\n    return this.type && this.type !== 'E' /* Timespan */ && this.type !== 'F' /* Position */;\r\n  }\r\n\r\n  getDisplayName(context) {\r\n    if (!this.type && this.type !== 'E' /* Timespan */) {\r\n      return null;\r\n    }\r\n\r\n    let name = filterMap[this.type] + ' ';\r\n    if (this.type === 'E' /* Timespan */) {\r\n      if (this.fromValue !== null && this.toValue !== null) {\r\n        name += 'from ' + getTimespanPartName(this.fromType, this.fromValue, context.timeFormat) + ' to ';\r\n        name += getTimespanPartName(this.toType, this.toValue, context.timeFormat);\r\n      }\r\n    } else if (this.type === 'F' /* Position */) {\r\n      if (this.polygons.length) {\r\n        name += this.polygons.length + ' polygons';\r\n      }\r\n    } else if (this.value !== null && !Number.isNaN(this.value)) {\r\n      switch (this.type) {\r\n        case 'A': // Acceleration\r\n          name += ((this.operator || '') + ' ');\r\n          name += (this.value + '% per second');\r\n          break;\r\n        case 'B': // Battery state\r\n          name += ((getBatteryOperator(this.operator) || '') + ' ');\r\n          name += batteryStateList[getBatteryValue(this.value)];\r\n          break;\r\n        case 'C': // Speed\r\n          name += ((this.operator || '') + ' ');\r\n          name += getSpeedName(this.value, context.units);\r\n          break;\r\n        case 'G': // GPS Accuracy\r\n          name += ((this.operator || '') + ' ');\r\n          name += gpsAccuracyList[this.value];\r\n          break;\r\n        case 'H': // Timer state\r\n          name += ((this.operator || '') + ' ');\r\n          name += timerStateList[this.value];\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  setType = (value) => {\r\n    this.type = value;\r\n  }\r\n\r\n  setOperator = (value) => {\r\n    this.operator = value;\r\n  }\r\n\r\n  setValue = (value) => {\r\n    this.value = value;\r\n  }\r\n\r\n  setFromType = (value) => {\r\n    this.fromType = value;\r\n  }\r\n\r\n  setFromValue = (value) => {\r\n    this.fromValue = value;\r\n  }\r\n\r\n  setToType = (value) => {\r\n    this.toType = value;\r\n  }\r\n\r\n  setToValue = (value) => {\r\n    this.toValue = value;\r\n  }\r\n\r\n  setOpen = (value) => {\r\n    this.open = value;\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\nconst round = (value) => {\r\n  return Math.round(value * 1000000) / 1000000;\r\n}\r\n\r\nexport default class Polygon {\r\n  vertexes = [];\r\n \r\n  constructor(vertexes) {\r\n    makeAutoObservable(this, {\r\n    });\r\n    if (vertexes) {\r\n      this.setVertexes(vertexes);\r\n    }\r\n  }\r\n\r\n  setVertexes = (value) => {\r\n    this.vertexes = value.map(p => [round(p.lat), round(p.lng)]);\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class LightButtonGroup {\r\n  id;\r\n  buttons = [];\r\n\r\n  constructor() {\r\n    this.id = nanoid();\r\n    makeAutoObservable(this, {\r\n      id: false\r\n    });\r\n  }\r\n\r\n  isValid() {\r\n    return this.buttons.every(g => g.isValid());\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class LightButton {\r\n  id;\r\n  mode = null;\r\n  name = null;\r\n\r\n  constructor() {\r\n    this.id = nanoid();\r\n    makeAutoObservable(this, {\r\n      id: false\r\n    });\r\n  }\r\n\r\n  setMode = (value) => {\r\n    this.mode = value;\r\n  }\r\n\r\n  setName = (value) => {\r\n    this.name = value;\r\n  }\r\n\r\n  isValid() {\r\n    return this.mode != null && (this.mode < 0 || this.name);\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport LightButtonGroup from './LightButtonGroup';\r\nimport LightButton from './LightButton';\r\n\r\nexport default class LightPanel {\r\n  buttonGroups = [];\r\n  lightName = null;\r\n\r\n  constructor(data) {\r\n    makeAutoObservable(this, {});\r\n    if (!data) {\r\n      return;\r\n    }\r\n\r\n    this.lightName = data.shortName;\r\n    data.buttonGroups.forEach(modeList => {\r\n      const group = new LightButtonGroup();\r\n      modeList.forEach(mode => {\r\n        const button = new LightButton();\r\n        button.mode = mode.id;\r\n        button.name = mode.name;\r\n        group.buttons.push(button);\r\n      });\r\n      this.buttonGroups.push(group);\r\n    });\r\n  }\r\n\r\n  isValid() {\r\n    return this.buttonGroups.every(g => g.isValid());\r\n  }\r\n\r\n  setLightName = (value) => {\r\n    this.lightName = value;\r\n  }\r\n}","import { makeAutoObservable } from 'mobx';\r\nimport FilterGroup from './FilterGroup';\r\nimport Filter from './Filter';\r\nimport Polygon from './Polygon';\r\nimport LightPanel from './LightPanel';\r\nimport LightButtonGroup from './LightButtonGroup';\r\nimport LightButton from './LightButton';\r\nimport { deviceList } from '../constants';\r\n\r\nconst defaultFilter = new Filter();\r\ndefaultFilter.type = 'D';\r\ndefaultFilter.operator = '=';\r\ndefaultFilter.value = '1';\r\n\r\nconst getDefaultGroupConfigurationValue = (lightMode) => {\r\n  let group = new FilterGroup(true);\r\n  group.lightMode = lightMode;\r\n  group.filters.push(defaultFilter);\r\n  return group.getConfigurationValue();\r\n};\r\n\r\nconst parseNumber = (chars, index, resultIndex) => {\r\n  let stringValue = null;\r\n  let i;\r\n  let isFloat = false;\r\n  for (i = index; i < chars.length; i++) {\r\n    const char = chars[i];\r\n    const charNumber = char.charCodeAt(0);\r\n    if (charNumber === 46 /* . */) {\r\n      isFloat = true;\r\n    } else if (charNumber !== 45 /* - */ && (charNumber > 57 /* 9 */ || charNumber < 48 /* 0 */)) {\r\n      break;\r\n    }\r\n\r\n    stringValue = stringValue === null ? char : stringValue + char;\r\n  }\r\n\r\n  resultIndex[0] = i;\r\n  return stringValue === null ? null\r\n    : isFloat ? parseFloat(stringValue)\r\n    : parseInt(stringValue);\r\n};\r\n\r\nconst parseNumberArray = (chars, index, resultIndex) => {\r\n  var left = parseNumber(chars, index, resultIndex);\r\n  if (left === null) {\r\n    return null;\r\n  }\r\n\r\n  var right = parseNumber(chars, resultIndex[0] + 1, resultIndex);\r\n  return [left, right];\r\n};\r\n\r\nconst parseTitle = (chars, index, resultIndex) => {\r\n  let stringValue = null;\r\n  let i;\r\n  for (i = index; i < chars.length; i++) {\r\n    const char = chars[i];\r\n    if (char === ':' || char === '#' || char === '|') {\r\n        break;\r\n    }\r\n\r\n    stringValue = stringValue === null ? char : stringValue + char;\r\n  }\r\n\r\n  resultIndex[0] = i;\r\n  return stringValue;\r\n};\r\n\r\nconst parseTimespanPart = (chars, index, filterResult, data, dataIndex) => {\r\n  const char = chars[index];\r\n  const type = char !== 's' /* Sunset */ && char !== 'r' /* Sunrise */\r\n    ? '0'\r\n    : char;\r\n  if (type !== '0') {\r\n      index++;\r\n  }\r\n\r\n  data[dataIndex] = type;\r\n  data[dataIndex + 1] = parseNumber(chars, index, filterResult);\r\n};\r\n\r\nconst parsePolygons = (chars, index, filterResult) => {\r\n  filterResult[1] = null; /* Filter operator */\r\n  // The first value represents the total number of polygons\r\n  const data = new Array(parseNumber(chars, index, filterResult) * 8);\r\n  let dataIndex = 0;\r\n  index = filterResult[0] + 1;\r\n  while (dataIndex < data.length) {\r\n      data[dataIndex] = parseNumber(chars, index, filterResult);\r\n      dataIndex++;\r\n      index = filterResult[0] + 1;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nconst parseGenericFilter = (chars, index, filterResult) => {\r\n  filterResult[1] = chars[index]; // Filter operator\r\n\r\n  return parseNumber(chars, index + 1, filterResult);\r\n};\r\n\r\nconst parseTimespan = (chars, index, filterResult) => {\r\n  const data = new Array(4);\r\n  filterResult[1] = null; /* Filter operator */\r\n  parseTimespanPart(chars, index, filterResult, data, 0);\r\n  parseTimespanPart(chars, filterResult[0] + 1 /* Skip , */, filterResult, data, 2);\r\n\r\n  return data;\r\n};\r\n\r\nconst parseLightPanel = (chars, i, filterResult) => {\r\n  const totalButtons = parseNumber(chars, i, filterResult);\r\n  if (!totalButtons) {\r\n      return null;\r\n  }\r\n\r\n  const panel = new LightPanel();\r\n  parseNumber(chars, filterResult[0] + 1, filterResult);\r\n  panel.lightName = parseTitle(chars, filterResult[0] + 1, filterResult);\r\n  i = filterResult[0];\r\n  while (i < chars.length) {\r\n    var char = chars[i];\r\n    if (char === '#') {\r\n        break;\r\n    }\r\n\r\n    if (char === '|') {\r\n        const lightButtonGroup = new LightButtonGroup();\r\n        const numberOfButtons = parseNumber(chars, filterResult[0] + 1, filterResult); // Number of buttons in the group\r\n        for (let j = 0; j < numberOfButtons; j++) {\r\n            let lightButton = new LightButton();\r\n            lightButton.name = parseTitle(chars, filterResult[0] + 1, filterResult);\r\n            lightButton.mode = parseNumber(chars, filterResult[0] + 1, filterResult);\r\n            lightButtonGroup.buttons.push(lightButton);\r\n        }\r\n\r\n        i = filterResult[0];\r\n        panel.buttonGroups.push(lightButtonGroup);\r\n    } else {\r\n        throw new Error('Invalid LightPanel configuration');\r\n    }\r\n  }\r\n\r\n  return panel;\r\n}\r\n\r\nconst parseFilters = (chars, i, lightMode, filterResult) => {\r\n  const totalFilters = parseNumber(chars, i, filterResult);\r\n  if (totalFilters === null) {\r\n    return null;\r\n  }\r\n\r\n  const groupDataLength = lightMode ? 3 : 2;\r\n  const totalGroups = parseNumber(chars, filterResult[0] + 1, filterResult);\r\n  const data = new Array((totalFilters * 3) + totalGroups * groupDataLength);\r\n  i = filterResult[0];\r\n  let dataIndex = 0;\r\n\r\n  while (i < chars.length) {\r\n    const charNumber = chars[i].charCodeAt(0);\r\n    if (charNumber === 35 /* # */) {\r\n      break;\r\n    }\r\n\r\n    if (charNumber === 124 /* | */) {\r\n      data[dataIndex] = parseTitle(chars, i + 1, filterResult); // Group title\r\n      data[dataIndex + 1] = parseNumber(chars, filterResult[0] + 1, filterResult); // Number of filters in the group\r\n      if (lightMode) {\r\n        data[dataIndex + 2] = parseNumber(chars, filterResult[0] + 1 /* Skip : */, filterResult); // The light mode id\r\n      }\r\n\r\n      dataIndex += groupDataLength;\r\n      i = filterResult[0];\r\n    } else if (charNumber >= 65 /* A */ && charNumber <= 90 /* Z */) {\r\n      const filterValue = charNumber === 70 /* F */ ? parsePolygons(chars, i + 1, filterResult)\r\n          : charNumber === 69 /* E */ ? parseTimespan(chars, i + 1, filterResult)\r\n          : parseGenericFilter(chars, i + 1, filterResult);\r\n\r\n      data[dataIndex] = chars[i]; // Filter type\r\n      data[dataIndex + 1] = filterResult[1]; // Filter operator\r\n      data[dataIndex + 2] = filterValue; // Filter value\r\n      dataIndex += 3;\r\n      i = filterResult[0];\r\n    } else {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nconst parseToFilter = (type, operator, value) => {\r\n  let filter = new Filter();\r\n  filter.type = type;\r\n  filter.operator = operator;\r\n  if (type === 'E' /* Timespan */) {\r\n    filter.fromType = value[0];\r\n    filter.fromValue = value[1];\r\n    filter.toType = value[2];\r\n    filter.toValue = value[3];\r\n  } else if (type === 'F' /* Position */) {\r\n    for (let i = 0; i < value.length; i += 8) {\r\n      let polygon = new Polygon();\r\n      let endIndex = i + 8;\r\n      for (let j = i; j < endIndex;) {\r\n        polygon.vertexes.push([value[j++], value[j++]]);\r\n      }\r\n\r\n      filter.polygons.push(polygon);\r\n    }\r\n  } else {\r\n    filter.value = value;\r\n  }\r\n\r\n  return filter;\r\n};\r\n\r\nconst parseToFilterGroups = (chars, i, hasLightMode, filterResult) => {\r\n  let filterGroups = [];\r\n  const values = parseFilters(chars, i, hasLightMode, filterResult);\r\n  if (!values) {\r\n    return filterGroups;\r\n  }\r\n\r\n  for (let i = 0; i < values.length;) {\r\n    let filterGroup = new FilterGroup(hasLightMode);\r\n    filterGroup.name = values[i++];\r\n    let totalFilters = values[i++];\r\n    filterGroup.lightMode = hasLightMode ? values[i++] : null;\r\n    let endIndex = i + totalFilters * 3;\r\n    for (let j = i; j < endIndex;) {\r\n      filterGroup.filters.push(parseToFilter(values[j++], values[j++], values[j++]));\r\n    }\r\n\r\n    i = endIndex;\r\n    filterGroups.push(filterGroup);\r\n  }\r\n\r\n  return filterGroups;\r\n};\r\n\r\nexport default class Configuration {\r\n\r\n  device = null;\r\n  units = 0;\r\n  timeFormat = 0;\r\n  globalFilterGroups = [];\r\n  headlight = null;\r\n  headlightModes = null;\r\n  headlightFilterGroups = [];\r\n  headlightDefaultMode = null;\r\n  headlightPanel = null;\r\n  taillight = null;\r\n  taillightModes = null;\r\n  taillightFilterGroups = [];\r\n  taillightDefaultMode = null;\r\n  taillightPanel = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this, {\r\n    });\r\n  }\r\n\r\n  static parse(value) {\r\n    if (!value || value.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const filterResult = [0 /* next index */, 0 /* operator type */];\r\n    const configuration = new Configuration();\r\n    configuration.globalFilterGroups = parseToFilterGroups(value, 0, false, filterResult);\r\n\r\n    configuration.headlightModes = parseNumberArray(value, filterResult[0] + 1, filterResult);\r\n    let filterGroups = parseToFilterGroups(value, filterResult[0] + 1, true, filterResult);\r\n    let defaultGroup;\r\n    if (filterGroups.length) {\r\n      defaultGroup = filterGroups.splice(filterGroups.length - 1, 1)[0];\r\n      configuration.headlightDefaultMode = defaultGroup.lightMode;\r\n    }\r\n\r\n    configuration.headlightFilterGroups = filterGroups;\r\n\r\n    configuration.taillightModes = parseNumberArray(value, filterResult[0] + 1, filterResult);\r\n    filterGroups = parseToFilterGroups(value, filterResult[0] + 1, true, filterResult);\r\n    if (filterGroups.length) {\r\n      defaultGroup = filterGroups.splice(filterGroups.length - 1, 1)[0];\r\n      configuration.taillightDefaultMode = defaultGroup.lightMode;\r\n    }\r\n\r\n    configuration.taillightFilterGroups = filterGroups;\r\n\r\n    configuration.headlightPanel = parseLightPanel(value, filterResult[0] + 1, filterResult);\r\n    configuration.taillightPanel = parseLightPanel(value, filterResult[0] + 1, filterResult);\r\n\r\n    configuration.device = parseTitle(value, filterResult[0] + 1, filterResult);\r\n    configuration.headlight = parseNumber(value, filterResult[0] + 1, filterResult);\r\n    configuration.taillight = parseNumber(value, filterResult[0] + 1, filterResult);\r\n    configuration.units = parseNumber(value, filterResult[0] + 1, filterResult);\r\n    configuration.timeFormat = parseNumber(value, filterResult[0] + 1, filterResult);\r\n\r\n    return configuration.isValid() ? configuration : null;\r\n  }\r\n\r\n  isValid() {\r\n    return this.globalFilterGroups.every(g => g.isValid()) && (\r\n        (this.headlight !== null || this.taillight !== null) &&\r\n        this.islightValid(this.headlight, this.headlightFilterGroups, this.headlightDefaultMode) &&\r\n        this.islightValid(this.taillight, this.taillightFilterGroups, this.taillightDefaultMode)\r\n      ) &&\r\n      (this.headlightPanel == null || this.headlightPanel.isValid()) &&\r\n      (this.taillightPanel == null || this.taillightPanel.isValid()) &&\r\n      this.device;\r\n  }\r\n\r\n  islightValid(light, lightFilterGroups, lightDefaultMode) {\r\n    if (light === null) {\r\n      return true;\r\n    }\r\n\r\n    return lightFilterGroups.every(g => g.isValid()) &&\r\n          (\r\n            (!lightFilterGroups.length && !this.globalFilterGroups.length) ||\r\n            lightDefaultMode !== null\r\n          );\r\n  }\r\n\r\n  getConfigurationValue() {\r\n    if (!this.isValid()) {\r\n      return null;\r\n    }\r\n\r\n    let config = `${this.getFilterGroupsConfigurationValue(this.globalFilterGroups, null)}`;\r\n    config += `#${this.getNumberArray(this.headlightModes)}`;\r\n    config += `#${this.getFilterGroupsConfigurationValue(this.headlightFilterGroups, this.headlightDefaultMode)}`;\r\n    config += `#${this.getNumberArray(this.taillightModes)}`;\r\n    config += `#${this.getFilterGroupsConfigurationValue(this.taillightFilterGroups, this.taillightDefaultMode)}`;\r\n    config += `#${this.getLightPanelConfigurationValue(this.headlightPanel, this.device)}`;\r\n    config += `#${this.getLightPanelConfigurationValue(this.taillightPanel, this.device)}`;\r\n    config += `#${(this.device)}`;\r\n    config += `#${(this.headlight === null ? '' : this.headlight)}`;\r\n    config += `#${(this.taillight === null ? '' : this.taillight)}`;\r\n    config += `#${(this.units)}`;\r\n    config += `#${(this.timeFormat)}`;\r\n\r\n    return config;\r\n  }\r\n\r\n  getNumberArray(value) {\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n\r\n    return `${value[0]},${value[1]}`;\r\n  }\r\n\r\n  getLightPanelConfigurationValue(lightPanel, deviceId) {\r\n    const device = deviceList.find(l => l.id === deviceId);\r\n    if (!lightPanel || !device || !device.touchScreen || !lightPanel.buttonGroups.length) {\r\n      return '';\r\n    }\r\n\r\n    const lightName = lightPanel.lightName ? lightPanel.lightName : ''\r\n    let buttonGroups = '';\r\n    let totalButtons = 0;\r\n    for (let i = 0; i < lightPanel.buttonGroups.length; i++) {\r\n      const buttons = lightPanel.buttonGroups[i].buttons;\r\n      totalButtons += buttons.length;\r\n      buttonGroups += `|${buttons.length}`;\r\n      for (let j = 0; j < buttons.length; j++) {\r\n        let button = buttons[j];\r\n        buttonGroups += `,${(button.mode < 0 ? '' : button.name)}:${button.mode}`;\r\n      }\r\n    }\r\n\r\n    return `${totalButtons},${lightPanel.buttonGroups.length}:${lightName}${buttonGroups}`;\r\n  }\r\n\r\n  getFilterGroupsConfigurationValue(filterGroups, defaultMode) {\r\n    if (!filterGroups.length && defaultMode === null) {\r\n      return '';\r\n    }\r\n\r\n    let config = '';\r\n    let totalFilters = 0;\r\n    let totalGroups = filterGroups.length;\r\n    let defaultGroupConfig = ''\r\n    if (defaultMode !== null) {\r\n      totalFilters++;\r\n      totalGroups++;\r\n      defaultGroupConfig = `|${getDefaultGroupConfigurationValue(defaultMode)}`;\r\n    }\r\n\r\n    filterGroups.forEach(g => {\r\n      totalFilters += g.filters.length;\r\n      config += `|${g.getConfigurationValue()}`;\r\n    });\r\n\r\n    return `${totalFilters},${totalGroups}${config}${defaultGroupConfig}`;\r\n  }\r\n\r\n  setDevice = (value) => {\r\n    this.device = value;\r\n  }\r\n\r\n  setUnits = (value) => {\r\n    this.units = value;\r\n  }\r\n\r\n  setTimeFormat = (value) => {\r\n    this.timeFormat = value;\r\n  }\r\n\r\n  setHeadlight = (value) => {\r\n    this.headlight = value;\r\n  }\r\n\r\n  setHeadlightModes = (value) => {\r\n    this.headlightModes = value;\r\n  }\r\n\r\n  setHeadlightDefaultMode = (value) => {\r\n    this.headlightDefaultMode = value;\r\n  }\r\n\r\n  setHeadlightPanel = (value) => {\r\n    this.headlightPanel = value;\r\n  }\r\n\r\n  setTaillight = (value) => {\r\n    this.taillight = value;\r\n  }\r\n\r\n  setTaillightModes = (value) => {\r\n    this.taillightModes = value;\r\n  }\r\n\r\n  setTaillightDefaultMode = (value) => {\r\n    this.taillightDefaultMode = value;\r\n  }\r\n\r\n  setTaillightPanel = (value) => {\r\n    this.taillightPanel = value;\r\n  }\r\n}","import Accordion from '@material-ui/core/Accordion';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport default withStyles({\r\n  root: {\r\n    border: '1px solid rgba(0, 0, 0, .125)',\r\n    boxShadow: 'none',\r\n    '&:not(:last-child)': {\r\n      borderBottom: 0\r\n    },\r\n    '&:before': {\r\n      display: 'none'\r\n    },\r\n    '&$expanded': {\r\n      margin: 'auto'\r\n    }\r\n  },\r\n  expanded: {}\r\n})(Accordion);","import MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst AccordionSummary = withStyles({\r\n  root: {\r\n    backgroundColor: 'rgba(0, 0, 0, .03)',\r\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n    marginBottom: -1,\r\n    minHeight: 56,\r\n    '&$expanded': {\r\n      minHeight: 56\r\n    }\r\n  },\r\n  content: {\r\n    '&$expanded': {\r\n      margin: '12px 0'\r\n    }\r\n  },\r\n  expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  name: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  error: {\r\n    color: '#f44336',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\nexport default observer(({ item, param1, removeLabel, removeCallback }) => {\r\n  const classes = useStyles();\r\n  return <AccordionSummary\r\n    expandIcon={<ExpandMoreIcon />}\r\n    aria-controls={item.id}\r\n    id={item.id}\r\n  >\r\n    <div style={{ width: '100%' }}>\r\n      <Grid container>\r\n        <Grid item xs={2} sm={1}>\r\n          <FormControlLabel\r\n            aria-label={removeLabel}\r\n            onClick={(event) => event.stopPropagation()}\r\n            onFocus={(event) => event.stopPropagation()}\r\n            control={\r\n            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => removeCallback(item)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={9} sm={10} className={classes.name} >\r\n          <Typography >{item.getDisplayName(param1)}</Typography>\r\n        </Grid>\r\n        <Grid item xs={1} sm={1} className={classes.error} >\r\n        { item.isValid() ? null : <ErrorOutlineIcon /> }\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  </AccordionSummary>\r\n});","import AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport default withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2)\r\n  }\r\n}))(AccordionDetails);","import { nanoid } from 'nanoid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst sliderMakeStyles = makeStyles((theme) => ({\r\n  input: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport default observer(({ label, value, setter, getLabelText, step, min, max, defaultValue }) => {\r\n  const id = nanoid();\r\n  const classes = sliderMakeStyles();\r\n  const handleChange = (event, newValue) => {\r\n    setter(newValue);\r\n  };\r\n\r\n  if (getLabelText != null && !getLabelText(value)) {\r\n    value = defaultValue;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.input}>\r\n      <Typography id={id} gutterBottom>{label}</Typography>\r\n      <Slider\r\n        step={step}\r\n        min={min}\r\n        max={max}\r\n        marks\r\n        aria-labelledby={id}\r\n        valueLabelFormat={getLabelText}\r\n        valueLabelDisplay=\"auto\"\r\n        value={value}\r\n        onChange={handleChange} />\r\n    </div>\r\n  );\r\n});","import Grid from '@material-ui/core/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, batteryStateList, getBatteryOperator, getBatteryValue } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return batteryStateList[value];\r\n  };\r\n  const setValue = (value) => {\r\n    filter.setValue(getBatteryValue(value));\r\n  };\r\n  const setOperator = (value) => {\r\n    filter.setOperator(getBatteryOperator(value));\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={setOperator} value={getBatteryOperator(filter.operator)} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Battery state\"\r\n        setter={setValue}\r\n        value={getBatteryValue(filter.value)}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={1}\r\n        max={5}\r\n        defaultValue={5}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import Grid from '@material-ui/core/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { operatorList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ label, filter }) => {\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppTextInput required label={label} type=\"number\" setter={filter.setValue} value={filter.value} />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import React from 'react';\r\nimport Configuration from './models/Configuration';\r\n\r\nexport const getContextValue = (configuration) => {\r\n  return {\r\n    units: configuration.units,\r\n    timeFormat: configuration.timeFormat\r\n  };\r\n};\r\n\r\nexport const AppContext = React.createContext(getContextValue(new Configuration()));","import React, { useContext, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { operatorList, speedUnitList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { AppContext } from '../AppContext';\r\n\r\nexport default observer(({ filter }) => {\r\n  const { units } = useContext(AppContext);\r\n  const [speed, setSpeed] = React.useState(0);\r\n  const setFilterValue = (speed) => {\r\n    if (speed === '') {\r\n      speed = null;\r\n    }\r\n\r\n    const mps = units === 1 /* Statute */\r\n      ? speed * 0.44704\r\n      : speed * 0.27777777777778;\r\n    filter.setValue(speed === null ? null : Math.round(mps * 100000) / 100000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newSpeed;\r\n    if (Number.isNaN(filter.value)) {\r\n      newSpeed = 0;\r\n    } else {\r\n      newSpeed = units === 0 /* Metric */\r\n        ? filter.value * 3.6\r\n        : filter.value * 2.236934;\r\n    }\r\n\r\n    setSpeed(Math.round(newSpeed * 100) / 100);\r\n  }, [units, filter.value]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={4}>\r\n        <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n      </Grid>\r\n      <Grid item xs={12} sm={5}>\r\n        <AppTextInput required label=\"Speed\" type=\"number\" setter={setFilterValue} value={speed} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={3}>\r\n        <AppSelect items={speedUnitList} label=\"Units\" value={units} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n});","import Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, gpsAccuracyList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return gpsAccuracyList[value];\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n    <Typography variant=\"h6\">Values:</Typography>\r\n      <ul>\r\n        <li><Typography variant=\"button\">N/A</Typography> - GPS is not available</li>\r\n        <li><Typography variant=\"button\">Last</Typography> - The Location is based on the last known GPS fix</li>\r\n        <li><Typography variant=\"button\">Poor</Typography> - The Location was calculated with a poor GPS fix. Only a 2-D GPS fix is available, likely due to a limited number of tracked satellites</li>\r\n        <li><Typography variant=\"button\">Ok</Typography> - The Location was calculated with a usable GPS fix. A 3-D GPS fix is available, with marginal HDOP (horizontal dilution of precision)</li>\r\n        <li><Typography variant=\"button\">Good</Typography> - The Location was calculated with a good GPS fix. A 3-D GPS fix is available, with good-to-excellent HDOP (horizontal dilution of precision)</li>\r\n      </ul>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Accuracy\"\r\n        setter={filter.setValue}\r\n        value={filter.value}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={0}\r\n        max={4}\r\n        defaultValue={4}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, timerStateList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return timerStateList[value];\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n    <Typography variant=\"h6\">Values:</Typography>\r\n      <ul>\r\n        <li><Typography variant=\"button\">NR</Typography> - Not recording</li>\r\n        <li><Typography variant=\"button\">ST</Typography> - Recording stopped</li>\r\n        <li><Typography variant=\"button\">PA</Typography> - Recording paused</li>\r\n        <li><Typography variant=\"button\">RE</Typography> - Recording</li>\r\n      </ul>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Timer state\"\r\n        setter={filter.setValue}\r\n        value={filter.value}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={0}\r\n        max={3}\r\n        defaultValue={0}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import TimePicker from '@material-ui/lab/TimePicker';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { AppContext } from '../AppContext';\r\n\r\nexport default observer(({ label, value, setter }) => {\r\n  const handleChange = (newValue) => {\r\n    setter(newValue);\r\n  };\r\n\r\n  if (!(value instanceof Date)) {\r\n    value = '';\r\n  }\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({timeFormat}) => (\r\n        <TimePicker\r\n          ampm={timeFormat === 1}\r\n          label={label}\r\n          value={value}\r\n          onChange={handleChange}\r\n          renderInput={(params) => (\r\n            <TextField {...params} margin=\"normal\" variant=\"standard\" />\r\n          )}\r\n        />\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n});","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppTimePicker from '../inputs/AppTimePicker';\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { timespanTypeList } from \"../constants\";\r\nimport addSeconds from \"date-fns/addSeconds\";\r\nimport startOfToday from \"date-fns/startOfToday\";\r\nimport { setSeconds, differenceInSeconds } from 'date-fns'\r\n\r\nexport default observer(({ filter }) => {\r\n  const getInitValue = (type, value) => {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n\r\n    return type === '0' /* Time */\r\n      ? addSeconds(startOfToday(), value)\r\n      : value / 60;\r\n  }\r\n\r\n  const getFilterValue = (type, value) => {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n\r\n    return type === '0' /* Time */\r\n      ? differenceInSeconds(value, startOfToday())\r\n      : value * 60;\r\n  }\r\n\r\n  const [state, setState] = React.useState({ \r\n    fromValue: getInitValue(filter.fromType, filter.fromValue),\r\n    toValue: getInitValue(filter.toType, filter.toValue)\r\n  });\r\n\r\n  const setFromValue = (value) => {\r\n    value = filter.fromType === '0' /* Time */ ? setSeconds(value, 0) : value;\r\n    filter.setFromValue(getFilterValue(filter.fromType, value));\r\n    setState({ fromValue: value, toValue: state.toValue });\r\n  };\r\n  const setToValue = (value) => {\r\n    value = filter.toType === '0' /* Time */ ? setSeconds(value, 0) : value;\r\n    filter.setToValue(getFilterValue(filter.toType, value));\r\n    setState({ fromValue: state.fromValue, toValue: value });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <AppSelect required items={timespanTypeList} label=\"From\" setter={filter.setFromType} value={filter.fromType} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          {\r\n            !filter.fromType ? null\r\n            : filter.fromType === '0' ? <AppTimePicker setter={setFromValue} value={state.fromValue} />\r\n            : <AppTextInput required label=\"Offset in minutes\" type=\"number\" setter={setFromValue} value={state.fromValue} />\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <AppSelect required items={timespanTypeList} label=\"To\" setter={filter.setToType} value={filter.toType} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          {\r\n            !filter.toType ? null\r\n            : filter.toType === '0' ? <AppTimePicker setter={setToValue} value={state.toValue} />\r\n            : <AppTextInput required label=\"Offset in minutes\" type=\"number\" setter={setToValue} value={state.toValue} />\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n});","import { useEffect } from 'react';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { action } from 'mobx';\r\nimport {featureGroup, polygon} from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport '@geoman-io/leaflet-geoman-free';\r\nimport '@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css';\r\nimport Polygon from '../models/Polygon';\r\n\r\nconst Polygons = observer(({ polygons }) => {\r\n  const mappings = {};\r\n  const handleDrawStart = e => {\r\n    e.workingLayer.on('pm:vertexadded', e => {\r\n      if (e.sourceTarget.getLatLngs().length >= 4) {\r\n        map.pm.Draw.Polygon._finishShape(e);\r\n      }\r\n    });\r\n  };\r\n  const handleEdit = e => {\r\n    const polygon = mappings[e.layer._leaflet_id];\r\n    polygon.setVertexes(e.layer.getLatLngs()[0]);\r\n  };\r\n  const handleCreate = action(e => {\r\n    const polygon = new Polygon(e.layer.getLatLngs()[0]);\r\n    mappings[e.layer._leaflet_id] = polygon;\r\n    polygons.push(polygon);\r\n    e.layer.on('pm:edit', handleEdit);\r\n  });\r\n  const handleRemove = action(e => {\r\n    const polygon = mappings[e.layer._leaflet_id];\r\n    delete mappings[e.layer._leaflet_id];\r\n    polygons.remove(polygon);\r\n    e.layer.off('pm:edit', handleEdit);\r\n  });\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.pm.setGlobalOptions({\r\n      snappable: false,\r\n      allowSelfIntersection: false,\r\n      hideMiddleMarkers: true\r\n    });\r\n    map.pm.addControls({\r\n      position: 'topleft',\r\n      drawCircle: false,\r\n      drawMarker: false,\r\n      drawCircleMarker: false,\r\n      drawRectangle: false,\r\n      drawPolyline: false,\r\n      cutPolygon: false\r\n    });\r\n    map.pm.Toolbar.changeActionsOfControl('Polygon', ['removeLastVertex', 'cancel']);\r\n    // Subscribe to event\r\n    map.on('pm:drawstart', handleDrawStart);\r\n    map.on('pm:create', handleCreate);\r\n    map.on('pm:remove', handleRemove);\r\n\r\n    // Draw polygons\r\n    var group = featureGroup();\r\n    polygons.forEach(p => {\r\n      const layer = polygon(p.vertexes).addTo(map);\r\n      layer.on('pm:edit', handleEdit);\r\n      mappings[layer._leaflet_id] = p;\r\n      group.addLayer(layer)\r\n    });\r\n    // Center the view\r\n    if (polygons.length) {\r\n      map.fitBounds(group.getBounds());\r\n    } else {\r\n      map.locate();\r\n      map.once('locationfound', e => {\r\n        map.zoomIn(8);\r\n        map.panTo(e.latlng);\r\n      });\r\n    }\r\n\r\n    return function cleanup() {\r\n      map.off('pm:drawstart', handleDrawStart);\r\n      map.off('pm:create', handleCreate);\r\n      map.off('pm:remove', handleRemove);\r\n    };\r\n  });\r\n\r\n  return null;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  map: {\r\n    height: '400px'\r\n  }\r\n}));\r\n\r\nexport default observer(({ filter }) => {\r\n  const classes = useStyles();\r\n  return (\r\n  <MapContainer className={classes.map} center={[0, 0]} zoom={0} scrollWheelZoom={true}>\r\n    <TileLayer\r\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    />\r\n    <Polygons polygons={filter.polygons} />\r\n  </MapContainer>\r\n  );\r\n});","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport BatteryFilter from '../filters/BatteryFilter';\r\nimport NumberFilter from '../filters/NumberFilter';\r\nimport SpeedFilter from '../filters/SpeedFilter';\r\nimport GpsAccuracyFilter from '../filters/GpsAccuracyFilter';\r\nimport TimerStateFilter from '../filters/TimerStateFilter';\r\nimport TimespanFilter from '../filters/TimespanFilter';\r\nimport PositionFilter from '../filters/PositionFilter';\r\nimport { AppContext } from '../AppContext';\r\nimport { action } from 'mobx';\r\n\r\nexport default observer(({ filters, filterTypes }) => {\r\n  const removeFilter = action((filter) => {\r\n    filters.remove(filter);\r\n  });\r\n  const handleChange = (filter) => {\r\n    filter.setOpen(!filter.open);\r\n  };\r\n\r\n  return filters.map(filter => (\r\n    <Accordion key={filter.id}\r\n      TransitionProps={{ unmountOnExit: true }}\r\n      expanded={filter.open}\r\n      onChange={() => handleChange(filter)}>\r\n      <AppContext.Consumer>\r\n        {(context) => (\r\n          <AccordionSummary\r\n            item={filter}\r\n            param1={context}\r\n            removeLabel=\"Remove filter\"\r\n            removeCallback={removeFilter}\r\n          />\r\n        )}\r\n      </AppContext.Consumer>\r\n      <AccordionDetails>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={12}>\r\n            <AppSelect items={filterTypes} required label=\"Type\" setter={filter.setType} value={filter.type} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12}>\r\n            {\r\n              filter.type === 'E' ? <TimespanFilter filter={filter} />\r\n              : filter.type === 'F' ? <PositionFilter filter={filter} />\r\n              : filter.type === 'B' ? <BatteryFilter filter={filter} />\r\n              : filter.type === 'A' ? <NumberFilter label=\"% per second\" filter={filter} />\r\n              : filter.type === 'C' ? <SpeedFilter filter={filter} />\r\n              : filter.type === 'G' ? <GpsAccuracyFilter filter={filter} />\r\n              : filter.type === 'H' ? <TimerStateFilter filter={filter} />\r\n              : null\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  ));\r\n});","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport FilterGroup from '../models/FilterGroup';\r\nimport Filter from '../models/Filter';\r\nimport Filters from '../components/Filters';\r\nimport { filterList, deviceMap } from '../constants';\r\n\r\nconst filtersWoPosition = filterList.filter(o => o.id !== 'F');\r\nconst getFilterTypes = (device, hasLightModes) => {\r\n  let list = !device || deviceMap[device].polygons ? filterList : filtersWoPosition;\r\n  return hasLightModes ? list : list.filter(o => o.id !== 'B');\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  list: {\r\n    padding: 0\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  heading: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\nexport default observer(({ filterGroups, lightModes, device }) => {\r\n  const [filterTypes, setFilterTypes] = React.useState(getFilterTypes(device, lightModes));\r\n  const classes = useStyles();\r\n  const createFilterGroup = action(() => {\r\n    filterGroups.push(new FilterGroup(!!lightModes));\r\n  });\r\n  const removeFilterGroup = action((filterGroup) => {\r\n    filterGroups.remove(filterGroup);\r\n  });\r\n  const createFilter = action((filterGroup) => {\r\n    filterGroup.filters.push(new Filter());\r\n  });\r\n  const handleChange = (filterGroup) => {\r\n    filterGroup.setOpen(!filterGroup.open);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setFilterTypes(getFilterTypes(device, lightModes));\r\n    },\r\n    [device, lightModes]\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <List className={classes.list}>\r\n        {filterGroups.map(filterGroup => (\r\n        <Accordion key={filterGroup.id}\r\n              TransitionProps={{ unmountOnExit: true }}\r\n              expanded={filterGroup.open}\r\n              onChange={() => handleChange(filterGroup)}>\r\n          <AccordionSummary\r\n            item={filterGroup}\r\n            param1={lightModes}\r\n            removeLabel=\"Remove group\"\r\n            removeCallback={removeFilterGroup}\r\n          />\r\n          <AccordionDetails>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6}>\r\n                <AppTextInput label=\"Group name\" setter={filterGroup.setName} value={filterGroup.name} />\r\n              </Grid>\r\n              {\r\n                lightModes ? (\r\n                <Grid item xs={12} sm={6}>\r\n                  <AppSelect required items={lightModes} label=\"Light mode\" setter={filterGroup.setLightMode} value={filterGroup.lightMode} />\r\n                </Grid>\r\n                )\r\n                : null\r\n              }\r\n              <Grid item xs={12} sm={12}>\r\n                <Typography variant=\"h5\" gutterBottom>Filters</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <div>\r\n              <Filters filters={filterGroup.filters} filterTypes={filterTypes} />\r\n            </div>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.button}\r\n              startIcon={<AddIcon />}\r\n              onClick={() => createFilter(filterGroup)}\r\n            >\r\n              Add Filter\r\n            </Button>\r\n\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        ))}\r\n      </List>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          className={classes.button}\r\n          startIcon={<AddIcon />}\r\n          onClick={createFilterGroup}\r\n        >\r\n          Add Filter Group\r\n        </Button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n});","import React, { useRef } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSelect from '../inputs/AppSelect';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n    cursor: 'move'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  actions: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\nexport default observer(({ buttonGroup, lightModes, index, moveGroup, addButton, removeButton }) => {\r\n  const ref = useRef(null);\r\n  const classes = useStyles();\r\n  const [, drop] = useDrop({\r\n    accept: 'ButtonGroup',\r\n    hover(item, monitor) {\r\n      if (!ref.current) {\r\n        return\r\n      }\r\n\r\n      const dragIndex = item.index\r\n      const hoverIndex = index\r\n\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current?.getBoundingClientRect()\r\n\r\n      // Get vertical middle\r\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset()\r\n\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n\r\n      // Time to actually perform the action\r\n      moveGroup(dragIndex, hoverIndex)\r\n\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: 'ButtonGroup', id: buttonGroup.id, index },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(drop(ref));\r\n  return (\r\n    <div ref={ref} className={classes.container} style={{ ...opacity }}>\r\n      <Grid container spacing={1}>\r\n        {buttonGroup.buttons.map((button, index) => (\r\n          <Grid item xs key={button.id}>\r\n            <Paper className={classes.paper}>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={12}>\r\n                  <AppSelect required items={lightModes} label=\"Light mode\" setter={button.setMode} value={button.mode} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12}>\r\n                  { button.mode >= 0\r\n                  ? <AppTextInput required label=\"Button name\" value={button.name} setter={button.setName} />\r\n                  : <AppTextInput label=\"Button name\" value=\"Smart / Manual / Network\" />\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n        <Grid item xs={1} className={classes.actions}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={12}>\r\n              <IconButton edge=\"end\" aria-label=\"add\" disabled={buttonGroup.buttons.length > 1} onClick={() => addButton(buttonGroup)}>\r\n                <AddIcon />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <IconButton edge=\"end\" aria-label=\"remove\" onClick={() => removeButton(buttonGroup)}>\r\n                <RemoveIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n});","import React, { useEffect, useCallback } from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LightButtonGroup from '../models/LightButtonGroup';\r\nimport LightButton from '../models/LightButton';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport { controlMode } from '../constants';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\n\r\nconst getModes = (lightModes) => {\r\n  return [controlMode].concat(lightModes);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nexport default observer(({ lightPanel, lightModes, }) => {\r\n  const classes = useStyles();\r\n  const [modes, setModes] = React.useState(getModes(lightModes));\r\n  const addButtonGroup = action(() => {\r\n    const group = new LightButtonGroup();\r\n    group.buttons.push(new LightButton());\r\n    lightPanel.buttonGroups.push(group);\r\n  });\r\n  const moveGroup = action(useCallback((dragIndex, hoverIndex) => {\r\n      const dragGroup = lightPanel.buttonGroups[dragIndex]\r\n      lightPanel.buttonGroups.splice(dragIndex, 1);\r\n      lightPanel.buttonGroups.splice(hoverIndex, 0, dragGroup);\r\n    },\r\n    [lightPanel.buttonGroups],\r\n  ));\r\n  const addButton = action((group) => {\r\n    group.buttons.push(new LightButton());\r\n  });\r\n  const removeButton = action((group) => {\r\n    group.buttons.remove(group.buttons[group.buttons.length - 1]);\r\n    if (!group.buttons.length) {\r\n      lightPanel.buttonGroups.remove(group);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    setModes(getModes(lightModes));\r\n  }, [lightModes]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6} sm={4}>\r\n          <AppTextInput label=\"Short light name\" setter={lightPanel.setLightName} value={lightPanel.lightName} />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        {lightPanel.buttonGroups.map((group, index) => (\r\n          <ButtonGroup\r\n            key={group.id}\r\n            buttonGroup={group}\r\n            lightModes={modes}\r\n            index={index}\r\n            moveGroup={moveGroup}\r\n            addButton={addButton}\r\n            removeButton={removeButton}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        className={classes.button}\r\n        startIcon={<AddIcon />}\r\n        onClick={() => addButtonGroup()}\r\n      >\r\n        Add Button Group\r\n      </Button>\r\n    </React.Fragment>\r\n    );\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport FilterGroups from './FilterGroups';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport LightPanel from './LightPanel';\r\nimport LightPanelModel from '../models/LightPanel';\r\nimport { isTouchScreen } from '../constants';\r\n\r\nconst getModes = (value, lights) => {\r\n  return value !== null ? lights.find(l => l.id === value).modes : null;\r\n};\r\n\r\nconst getDefaultPanel = (value, lights) => {\r\n  return value !== null ? lights.find(l => l.id === value).defaultLightPanel : null;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  sectionTitle: {\r\n    'margin-top': theme.spacing(3),\r\n    'margin-bottom': theme.spacing(1),\r\n  }\r\n}));\r\n\r\nexport default observer(({\r\n  className, headerClassName, device, globalFilterGroups, lightType, lightList, lightFilterGroups, setLight, light,\r\n  setLightModes, setDefaultMode, defaultMode, lightPanel, setLightPanel }) => {\r\n  const classes = useStyles();\r\n  const [modes, setModes] = React.useState(getModes(light, lightList));\r\n  const setValue = (value) => {\r\n    setLight(value);\r\n    setLightModes(value !== null ? lightList.find(l => l.id === value).lightModes : null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setModes(getModes(light, lightList));\r\n    if (light == null) {\r\n      setLightPanel(null);\r\n    } else if (lightPanel == null) {\r\n      const lightPanel = new LightPanelModel(getDefaultPanel(light, lightList));\r\n      setLightPanel(lightPanel);\r\n    }\r\n  }, [light, lightList, setLightPanel, lightPanel]);\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader\r\n        title={lightType + ' Configuration'}\r\n        titleTypographyProps={{ align: 'center' }}\r\n        className={headerClassName}\r\n      />\r\n      <CardContent>\r\n        <Typography color=\"textPrimary\" gutterBottom>\r\n        In order to configure the light, the correct light should be selected as every light supports only a few modes from the \"ANT+ Bike Lights Device Profile\" \r\n        and may differ from light to light. In case your light is not on the list, please feel free to open an issue on GitHub or select \"Unknown\" option. The \r\n        \"Unknown\" option includes all the available options from the ANT+ profile and should only be used to test which modes your light supports. In case an \r\n        unsupported mode is selected, the application will display an error code on the screen. When the correct light is selected, then you can define filters that \r\n        triggers a certain light mode and set the default mode, which will be used when none of the defined filters evaluate to true. The filter logic is the same \r\n        as for global filters, where all filters inside a filter group need to be true in order the filter group light mode to be used. In case having multiple \r\n        filter groups, the light mode of the first filter group to be evaluated to true, will be used.\r\n        </Typography>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid item xs={12} sm={4}>\r\n            <AppSelect items={lightList} label={lightType} setter={setValue} value={light} />\r\n          </Grid>\r\n          {\r\n            modes\r\n            ?\r\n            <Grid item xs={12} sm={4}>\r\n              <AppSelect\r\n                  required={globalFilterGroups.length || lightFilterGroups.length ? true : false}\r\n                  items={modes}\r\n                  label=\"Default mode\"\r\n                  setter={setDefaultMode}\r\n                  value={defaultMode} />\r\n            </Grid>\r\n            : null\r\n          }\r\n        </Grid>\r\n        {\r\n          modes\r\n          ? <React.Fragment>\r\n              <Typography variant=\"h5\" className={classes.sectionTitle} color=\"textPrimary\">Filter groups</Typography>\r\n              <FilterGroups filterGroups={lightFilterGroups} lightModes={modes} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n        {\r\n          modes && lightPanel && isTouchScreen(device)\r\n          ? <React.Fragment>\r\n            <Typography variant=\"h5\" className={classes.sectionTitle} color=\"textPrimary\">Light panel</Typography>\r\n            <LightPanel lightPanel={lightPanel} lightModes={modes} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n      </CardContent>\r\n    </Card>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Alert from '@material-ui/core/Alert';\r\nimport { observer } from 'mobx-react-lite'\r\nimport FilterGroups from './FilterGroups';\r\nimport LightConfiguration from './LightConfiguration';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { headlightList, taillightList } from '../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  copyButton: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardHeader: {\r\n    backgroundColor:\r\n      theme.palette.mode === 'light'\r\n        ? theme.palette.grey[200]\r\n        : theme.palette.grey[700],\r\n  },\r\n  card: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default observer(({ configuration }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Card className={classes.card}>\r\n          <CardHeader\r\n            title=\"Global Filters\"\r\n            titleTypographyProps={{ align: 'center' }}\r\n            className={classes.cardHeader}\r\n          />\r\n          <CardContent>\r\n            <Typography color=\"textPrimary\" gutterBottom>\r\n            Global filters are the first filters that are checked when the lights are in Smart mode and in case none of the defined filters evaluates to be true, \r\n            the head/tail lights filters won't be evaluated. In other words, with global filters we can define filters that we want to apply for both tail \r\n            and head lights (e.g. turn them on after sunset). In case you have only one light or don't have any common filter for both lights, just leave it \r\n            empty and head/taillight filters will be evaluated. In order to define a filter that requires multiple conditions to be true, we have so called filter \r\n            groups, that consist of one or more filters that must be true so that the whole filter group is evaluated to true. In case you need that any of the \r\n            defined filters turns on the lights, create a filter group for each filter. In short, the Smart mode logic uses AND operator for filters inside a \r\n            filter group and OR operator for filter groups. For each filter group a name can be set that will be displayed on your Garmin device (only when enough space is available) when evaluated to true, so that it is easier to understand which filter group triggered the lights to be turned on. When having \r\n            multiple filter groups, the name of the first one to be evaluated as true will be used.\r\n            </Typography>\r\n            <Grid className={classes.card} item xs={12} sm={12}>\r\n              <Typography variant=\"h5\" color=\"textPrimary\">\r\n                  Filter groups\r\n              </Typography>\r\n            </Grid>\r\n            <FilterGroups filterGroups={configuration.globalFilterGroups} device={configuration.device} />\r\n          </CardContent>\r\n        </Card>\r\n        \r\n        <LightConfiguration\r\n          className={classes.card}\r\n          headerClassName={classes.cardHeader}\r\n          device={configuration.device}\r\n          globalFilterGroups={configuration.globalFilterGroups}\r\n          lightType=\"Headlight\"\r\n          lightList={headlightList}\r\n          lightFilterGroups={configuration.headlightFilterGroups}\r\n          light={configuration.headlight}\r\n          setLight={configuration.setHeadlight}\r\n          setLightModes={configuration.setHeadlightModes}\r\n          setDefaultMode={configuration.setHeadlightDefaultMode}\r\n          defaultMode={configuration.headlightDefaultMode}\r\n          lightPanel={configuration.headlightPanel}\r\n          setLightPanel={configuration.setHeadlightPanel}\r\n        />\r\n        <LightConfiguration\r\n          className={classes.card}\r\n          headerClassName={classes.cardHeader}\r\n          device={configuration.device}\r\n          globalFilterGroups={configuration.globalFilterGroups}\r\n          lightType=\"Taillight\"\r\n          lightList={taillightList}\r\n          light={configuration.taillight}\r\n          setLight={configuration.setTaillight}\r\n          setLightModes={configuration.setTaillightModes}\r\n          lightFilterGroups={configuration.taillightFilterGroups}\r\n          setDefaultMode={configuration.setTaillightDefaultMode}\r\n          defaultMode={configuration.taillightDefaultMode}\r\n          lightPanel={configuration.taillightPanel}\r\n          setLightPanel={configuration.setTaillightPanel}\r\n        />\r\n\r\n        <Card className={classes.card}>\r\n          <CardHeader\r\n            title=\"Lights Configuration\"\r\n            titleTypographyProps={{ align: 'center' }}\r\n            className={classes.cardHeader}\r\n          />\r\n          <CardContent>\r\n            <Typography color=\"textPrimary\" gutterBottom>\r\n            When the lights are configured copy the below value and paste it in the Smart Light Bike application setting 'Lights Configuration' by using \r\n            Garmin Connect Mobile or Garmin Express.\r\n            </Typography>\r\n            {configuration.isValid() ?\r\n            <React.Fragment>\r\n              <Grid item xs={12} sm={12}>\r\n                <AppTextInput value={configuration.getConfigurationValue()} />\r\n              </Grid>\r\n              <Grid item className={classes.copyButton} xs={12} sm={12}>\r\n                <Button variant=\"contained\" onClick={() => {navigator.clipboard.writeText(configuration.getConfigurationValue())}}>Copy to clipboard</Button>\r\n              </Grid>\r\n            </React.Fragment>\r\n            :\r\n            <Grid item xs={12} sm={12}>\r\n              <Alert severity=\"error\">Please fill the missing fields.</Alert>\r\n            </Grid>\r\n            }\r\n          </CardContent>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/core/Alert';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { deviceList, timeFormatList, unitList } from './constants';\r\nimport AppSelect from './inputs/AppSelect';\r\nimport AppTextInput from './inputs/AppTextInput';\r\nimport Configuration from './models/Configuration';\r\nimport DeviceConfiguration from './components/DeviceConfiguration';\r\nimport { AppContext, getContextValue } from './AppContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6)\r\n  },\r\n  parseButtonCell: {\r\n    marginBottom: 'auto',\r\n    marginTop: 'auto'\r\n  },\r\n  parseButton: {\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nexport default observer(() => {\r\n  const classes = useStyles();\r\n  let configuration = new Configuration();\r\n  const [state, setState] = React.useState({\r\n    configuration: configuration,\r\n    existingConfigurationValue: null,\r\n    context: getContextValue(configuration),\r\n    parseError: false\r\n  });\r\n  const setUnits = (value) => {\r\n    state.configuration.setUnits(value);\r\n    setState({ ...state, context: getContextValue(state.configuration) });\r\n  };\r\n  const setTimeFormat = (value) => {\r\n    state.configuration.setTimeFormat(value);\r\n    setState({ ...state, context: getContextValue(state.configuration) });\r\n  };\r\n  const setExistingConfigurationValue = (value) => {\r\n    setState({ ...state, existingConfigurationValue: value });\r\n  };\r\n  const parse = (value) => {\r\n    try {\r\n      configuration = Configuration.parse(value);\r\n      if (!configuration) {\r\n        setState({\r\n          ...state,\r\n          existingConfigurationValue: null,\r\n          parseError: true\r\n        });\r\n        return;\r\n      }\r\n\r\n      setState({\r\n        configuration: configuration,\r\n        existingConfigurationValue: null,\r\n        context: getContextValue(configuration),\r\n        parseError: false\r\n      });\r\n    }\r\n    catch (e) {\r\n      setState({\r\n        ...state,\r\n        existingConfigurationValue: null,\r\n        parseError: true\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={state.context}>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Lights Configurator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.mainContent}>\r\n          <Container maxWidth=\"md\">\r\n            <Grid container spacing={2} justify=\"center\">\r\n              <Grid item xs={8} sm={10}>\r\n                <AppTextInput label=\"Existing configuration\" value={state.existingConfigurationValue} setter={setExistingConfigurationValue} />\r\n              </Grid>\r\n              <Grid item xs={4} sm={2} className={classes.parseButtonCell}>\r\n                <Button className={classes.parseButton} variant=\"contained\" onClick={() => {parse(state.existingConfigurationValue)}}>Parse</Button>\r\n              </Grid>\r\n              { state.parseError ?\r\n                <Grid item xs={12} sm={12}>\r\n                  <Alert severity=\"error\">Invalid configuration.</Alert>\r\n                </Grid>\r\n                : null\r\n              }\r\n              <Grid item xs={12} sm={4}>\r\n                <AppSelect required items={deviceList} label=\"Garmin device\" setter={state.configuration.setDevice} value={state.configuration.device} />\r\n              </Grid>\r\n              <Grid item xs={6} sm={4}>\r\n                <AppSelect required items={unitList} label=\"Units\" setter={setUnits} value={state.configuration.units} />\r\n              </Grid>\r\n              <Grid item xs={6} sm={4}>\r\n                <AppSelect required items={timeFormatList} label=\"Time format\" setter={setTimeFormat} value={state.configuration.timeFormat} />\r\n              </Grid>\r\n            </Grid>\r\n            { state.configuration.device ? <DeviceConfiguration configuration={state.configuration} /> : null }\r\n          </Container>\r\n        </div>\r\n      </main>\r\n    </AppContext.Provider>\r\n    );\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport DateFnsAdapter from '@material-ui/lab/dateAdapter/date-fns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LocalizationProvider dateAdapter={DateFnsAdapter}>\n      <DndProvider backend={HTML5Backend}>\n        <App />\n      </DndProvider>\n    </LocalizationProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}